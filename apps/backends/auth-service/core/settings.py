"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import sys
from typing import Any, Dict

TESTING = 'test' in sys.argv or os.getenv('DJANGO_TESTING') == 'true'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-default-key-change-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')


# Application definition

# Приложения Django
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Внешние библиотеки
EXTERNAL_LIBS = [ 
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'rest_framework',
    'corsheaders',
    'import_export',
    'timezone_field',
]

# Внешние библиотеки
EXTERNAL_LIBS_MUST_BE_FIRST = [
    'jazzmin',    
]

# Приложения самого проекта
PROJECT_APPS = [
    'accounts.apps.AccountsConfig',
    'django_login_control.apps.DjangoLoginControlConfig',
]

INSTALLED_APPS = EXTERNAL_LIBS_MUST_BE_FIRST + DJANGO_APPS + EXTERNAL_LIBS + PROJECT_APPS


MIDDLEWARE = [
    # 'accounts.middleware.RequestLoggingMiddleware',
    # 'accounts.middleware.PasswordHasherLoggingMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_login_control.middleware.IpLockoutMiddleware',
    'django_login_control.middleware.UserLockoutMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

# Кэш настройки (переопределяются для тестов, см. ниже)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"redis://{os.getenv('REDIS_HOST', 'global-redis')}:{os.getenv('REDIS_PORT', 6378)}/0",
    }
}
USER_PROFILE_CACHE_TIMEOUT = int(os.getenv('USER_PROFILE_CACHE_TIMEOUT', 300))

# Задержка между запросом на удаление аккаунта и его исполнением
USER_DELETION_TIMEOUT_IN_SECONDS = int(os.getenv('USER_DELETION_TIMEOUT_IN_SECONDS', 300))

# # Password validation
# # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery
# Отключаем Celery для тестов
if TESTING:
    CELERY_BROKER_URL = 'memory://'
    CELERY_RESULT_BACKEND = 'rpc://'
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True
    # Используем локальный кэш для тестов
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        }
    }
else:
    CELERY_BROKER_URL = f'redis://{os.getenv("REDIS_HOST", "global-redis")}:{os.getenv("REDIS_PORT", 6378)}/0'
    CELERY_RESULT_BACKEND = CELERY_BROKER_URL

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

AUTH_USER_MODEL = 'accounts.User'

ANONYMOUS_USER_ID = os.getenv('ANONYMOUS_USER_ID', '1')

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'accounts.authentication.CsrfExemptSessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Auth API',
    'DESCRIPTION': 'Документация по эндпойнтам авторизации и управления пользователями',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SWAGGER_UI_SETTINGS': {
        'persistAuthorization': True,
        'requestInterceptor': """
            (req) => {
                const csrfToken = document.cookie.split('; ')
                    .find(row => row.startsWith('csrftoken='))
                    ?.split('=')[1];
                if (csrfToken) {
                    req.headers['X-CSRFToken'] = csrfToken;
                }
                return req;
            }
        """,
    },
}


# CSRF settings
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',')
CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'False').lower() == 'true'
CSRF_COOKIE_HTTPONLY = os.getenv('CSRF_COOKIE_HTTPONLY', 'False').lower() == 'true'
CSRF_USE_SESSIONS = os.getenv('CSRF_USE_SESSIONS', 'False').lower() == 'true'
CSRF_COOKIE_NAME = os.getenv('CSRF_COOKIE_NAME', 'csrftoken')
CSRF_HEADER_NAME = os.getenv('CSRF_HEADER_NAME', 'HTTP_X_CSRFTOKEN')
CSRF_COOKIE_DOMAIN = os.getenv('CSRF_COOKIE_DOMAIN') or None

# Session settings
SESSION_ENGINE = "accounts.backends"
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIE_AGE = int(os.getenv('SESSION_COOKIE_AGE', 60 * 60 * 24))  # 1 день по умолчанию
SESSION_COOKIE_HTTPONLY = os.getenv('SESSION_COOKIE_HTTPONLY', 'False').lower() == 'true'
SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'False').lower() == 'true'
SESSION_COOKIE_DOMAIN = os.getenv('SESSION_COOKIE_DOMAIN') or None
# SESSION_COOKIE_SAMESITE = None

# Email settings
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

if EMAIL_BACKEND == 'django.core.mail.backends.console.EmailBackend':
    EMAIL_HOST = 'localhost'
    EMAIL_PORT = 1025
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = False
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    DEFAULT_FROM_EMAIL = 'noreply@example.com'
    FRONTEND_EMAIL_CONFIRMATION_URL = 'http://localhost:8078/email-confirmation'
    FRONTEND_PASS_CHANGE_CONFIRMATION_URL='http://localhost:8078/password-change/'
    FRONTEND_EMAIL_CHANGE_CONFIRMATION_URL='http://localhost:8078/email-change/'
else:
    EMAIL_HOST = os.getenv('EMAIL_HOST', '')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'False').lower() == 'true'
    EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', '')
    FRONTEND_EMAIL_CONFIRMATION_URL = os.getenv('FRONTEND_EMAIL_CONFIRMATION_URL', '')
    FRONTEND_PASS_CHANGE_CONFIRMATION_URL=os.getenv('FRONTEND_PASS_CHANGE_CONFIRMATION_URL', '')
    FRONTEND_EMAIL_CHANGE_CONFIRMATION_URL=os.getenv('FRONTEND_EMAIL_CHANGE_CONFIRMATION_URL', '')

# Logging
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} {name} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'accounts': {
            'handlers': ['console'],
            'level': LOG_LEVEL, 
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': LOG_LEVEL, 
            'propagate': False,
        },
        'django.template': {
            'handlers': ['console'],
            'level': 'CRITICAL',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'CRITICAL',
            'propagate': False,
        },
    },
}



# Настройки CSRF и CORS
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',')
CORS_ALLOW_ALL_ORIGINS = os.getenv('CORS_ALLOW_ALL_ORIGINS', 'False').lower() == 'true'
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in os.getenv('CORS_ALLOWED_ORIGINS', '').split(',') if origin.strip()]
CORS_ALLOWED_ORIGIN_REGEXES = [regex.strip() for regex in os.getenv('CORS_ALLOWED_ORIGIN_REGEXES', '').split(',') if regex.strip()]
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'real-ip',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-screen-width',
    'x-screen-height',
    'x-screen-resolution',
]


# Настройки админки
LOGIN_REDIRECT_URL = '/admin/'
LOGIN_URL = '/admin/login/'

# Настройки контроля логинов
WRONG_ATTEMPTS_NUMBER = int(os.getenv('WRONG_ATTEMPTS_NUMBER', 3))
WRONG_ATTEMPTS_DURATION = int(os.getenv('WRONG_ATTEMPTS_DURATION', 10))
USER_BAN_DURATION = int(os.getenv('USER_BAN_DURATION', 10))
IP_WRONG_ATTEMPTS_NUMBER = int(os.getenv('IP_WRONG_ATTEMPTS_NUMBER', 6))
IP_BAN_DURATION = int(os.getenv('IP_BAN_DURATION', 600))


# Настройки паролей
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS: list[Dict[str, Any]] = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "accounts.password_validators.SymbolsValidator",
    },
]

APPEND_SLASH = False

if DEBUG:
    print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")
    print(f"CORS_ALLOW_ALL_ORIGINS: {CORS_ALLOW_ALL_ORIGINS}")
    print(f"CORS_ALLOWED_ORIGINS: {CORS_ALLOWED_ORIGINS}")
    print(f"CORS_ALLOWED_ORIGIN_REGEXES: {CORS_ALLOWED_ORIGIN_REGEXES}")
    print(f"CORS_ALLOW_CREDENTIALS: {CORS_ALLOW_CREDENTIALS}")
    print(f"CORS_ALLOW_METHODS: {CORS_ALLOW_METHODS}")
    print(f"CSRF_TRUSTED_ORIGINS: {CSRF_TRUSTED_ORIGINS}")
    print(f"CSRF_COOKIE_SECURE: {CSRF_COOKIE_SECURE}")
    print(f"CSRF_COOKIE_HTTPONLY: {CSRF_COOKIE_HTTPONLY}")
    print(f"CSRF_USE_SESSIONS: {CSRF_USE_SESSIONS}")
    print(f"CSRF_COOKIE_NAME: {CSRF_COOKIE_NAME}")
    print(f"CSRF_HEADER_NAME: {CSRF_HEADER_NAME}")
    print(f"CSRF_COOKIE_DOMAIN: {CSRF_COOKIE_DOMAIN}")
    print(f"SESSION_ENGINE: {SESSION_ENGINE}")
    print(f"SESSION_CACHE_ALIAS: {SESSION_CACHE_ALIAS}")


# Настройки RabbitMQ
RABBITMQ_URL = os.getenv('RABBITMQ_URL')
OUTGOING_QUEUE_NAME = os.getenv('OUTGOING_QUEUE_NAME', 'auth_outgoing')

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Настройки email
EMAIL_VERIFICATION_TOKEN_TTL = int(os.getenv('EMAIL_VERIFICATION_TOKEN_TTL', 15*60))
PROFILE_VERIFICATION_TOKEN_TTL = int(os.getenv('PROFILE_VERIFICATION_TOKEN_TTL', 600))
EMAIL_CHANGE_TOKEN_TTL = int(os.getenv('EMAIL_CHANGE_TOKEN_TTL', 600))
