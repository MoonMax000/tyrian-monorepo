// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/posts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all posts with pagination and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get all posts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ForYou, Popular, Following",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Post type: ideas|videos|opinions|analytics|softwares (Popular only)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1, min: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 10, max: 1000)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort type: latest or recommended (default: latest)",
                        "name": "sort_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by tags: ex.: idea,video",
                        "name": "tags",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with pagination",
                        "schema": {
                            "$ref": "#/definitions/types.PostsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid pagination parameters",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/block/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing post for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Update an existing block of post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated block data and order",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateBlockRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing post for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete an existing post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new block for post for the authenticated user, type_example: ideas videos opinions analytics softwares",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Create a new block for post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User plan",
                        "name": "user_plan",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Post JSON data",
                        "name": "post",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Block JSON data {",
                        "name": "block",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "JSON metadata: {\\",
                        "name": "files_metadata",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "file"
                        },
                        "collectionFormat": "csv",
                        "description": "Files to upload",
                        "name": "files",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.PostCreateV2"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/search": {
            "get": {
                "description": "Returns all posts with pagination and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get all posts and blocks with search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "user_email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "query for search",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "field for search desc: title, content, type, created, popular, popular-created, created-popular. default without q -\u003e sort = created. default with q -\u003e sort = ",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1, min: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 10, max: 1000)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order: title,content,type",
                        "name": "sort_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by tags: ex.: idea,video",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by post type: ideas videos opinions analytics softwares",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with pagination",
                        "schema": {
                            "$ref": "#/definitions/types.PostsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid pagination parameters",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/search/tags": {
            "get": {
                "description": "Returns tags that match the query (prefix or substring match)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Search tags by name (autocomplete)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1, min: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 10, max: 1000)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TagSearchResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/user/{userId}": {
            "get": {
                "description": "Returns all posts with pagination and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get all posts by userEmail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ForYou, Popular, Following",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Post type: ideas|videos|opinions|analytics|softwares (Popular only)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User Email",
                        "name": "user_email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1, min: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 10, max: 1000)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort type: latest or recommended (default: latest)",
                        "name": "sort_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by tags: ex.: idea,video",
                        "name": "tags",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with pagination",
                        "schema": {
                            "$ref": "#/definitions/types.PostsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid pagination parameters",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns single post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get post by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_email",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PostsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing post for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Update an existing post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated post data",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdatePostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing post for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete an existing post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/{id}/files": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete files from Object Storage and DB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete files from post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "File IDs to delete",
                        "name": "file_ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DeleteFilesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted file URLs",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/{postId}/subscribe": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Subscribe the authenticated user to a post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Subscribe to a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/{postId}/unsubscribe": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Unsubscribe the authenticated user from a post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Unsubscribe from a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.FailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.FailureErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.BlockCreate": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.FileCreate"
                    }
                },
                "id": {
                    "type": "string"
                },
                "media_url": {
                    "type": "string"
                },
                "next_block": {
                    "type": "string"
                },
                "post_id": {
                    "type": "string"
                },
                "prev_block": {
                    "type": "string"
                }
            }
        },
        "types.DeleteFilesRequest": {
            "type": "object",
            "properties": {
                "file_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.FailureErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.FailureResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.File": {
            "type": "object",
            "properties": {
                "ext": {
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "types.FileCreate": {
            "type": "object",
            "properties": {
                "ext": {
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "types.PaginationResponse": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_records": {
                    "type": "integer"
                }
            }
        },
        "types.Post": {
            "type": "object",
            "properties": {
                "author_avatar": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "favorite": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.File"
                    }
                },
                "id": {
                    "type": "string"
                },
                "like_count": {
                    "type": "integer"
                },
                "liked": {
                    "type": "string"
                },
                "media_url": {
                    "type": "string"
                },
                "need_payment": {
                    "type": "boolean"
                },
                "payment": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Tag"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "ideas",
                        "videos",
                        "opinions",
                        "analytics",
                        "softwares"
                    ]
                },
                "user_email": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.PostCreateV2": {
            "type": "object",
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BlockCreate"
                    }
                },
                "content": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "first_block_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "media_url": {
                    "type": "string"
                },
                "payment": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Tag"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "ideas",
                        "videos",
                        "opinions",
                        "analytics",
                        "softwares"
                    ]
                },
                "user_email": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.PostResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.Post"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.PostsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Post"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.Tag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.TagSearchResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Tag"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/types.PaginationResponse"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.UpdateBlockRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "опционально",
                    "type": "string",
                    "minLength": 5
                },
                "media_url": {
                    "description": "опционально, но должен быть валидным URL",
                    "type": "string"
                },
                "next_block_id": {
                    "type": "string"
                }
            }
        },
        "types.UpdatePostRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "опционально",
                    "type": "string",
                    "minLength": 5
                },
                "media_url": {
                    "description": "опционально, но должен быть валидным URL",
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Tag"
                    }
                },
                "title": {
                    "description": "опционально, кастомный forbidden_titles",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "type": {
                    "description": "опционально, допустимые значения",
                    "type": "string",
                    "enum": [
                        "ideas",
                        "videos",
                        "opinions",
                        "analytics",
                        "softwares"
                    ]
                }
            }
        }
    },
    "securityDefinitions": {
        "CookieAuth": {
            "description": "Сессионная аутентификация через куку sessionid",
            "type": "apiKey",
            "name": "sessionid",
            "in": "cookie"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "AXA-socialweb-service Swagger",
	Description:      "This is an API of posts-service for Socialweb application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
