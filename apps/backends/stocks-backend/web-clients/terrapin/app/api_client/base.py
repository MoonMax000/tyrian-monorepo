import asyncio
import time
from typing import Any

import aiohttp
from app.settings import settings, redis


class BaseAsyncApiClient:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å API
    """

    def __init__(
        self,
        base_url: str,
        bearer_api_key: str | None = None,
        params_api_key: str | None = None,
        timeout: int = 10,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞

        :param base_url: –ë–∞–∑–æ–≤—ã–π URL API
        :param api_key: API –∫–ª—é—á
        :param timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.base_url = str(base_url).rstrip("/")
        self.bearer_api_key = bearer_api_key
        self.params_api_key = params_api_key
        self.headers = self._build_headers()
        
        # Rate limiting settings
        self.requests_per_minute = settings.TERRAPIN_REQUEST_PER_MINUTE
        self.delay_between_requests = 60.0 / self.requests_per_minute  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.redis_key = "terrapin_last_request_time"

    def _set_params_api_key(self, params: dict[str, Any]) -> None:
        params["apikey"] = self.params_api_key

    def _build_headers(self) -> dict[str, str]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤

        :return: –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        """
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
        }
        if self.bearer_api_key:
            headers["Authorization"] = f"Bearer {self.bearer_api_key}"
        return headers

    async def _wait_for_rate_limit(self) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∂–¥–µ—Ç –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            lock_key = f"{self.redis_key}_lock"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            lock_acquired = await redis.set(lock_key, "1", nx=True, ex=30)  # 30 —Å–µ–∫—É–Ω–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            
            if not lock_acquired:
                # –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞, –∂–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                import random
                wait_time = random.uniform(0.1, 1.0)
                print(f"‚è≥ [RATE LIMIT] Waiting for lock, retrying in {wait_time:.2f} seconds")
                await asyncio.sleep(wait_time)
                return await self._wait_for_rate_limit()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ Redis
                last_request_time_str = await redis.get(self.redis_key)
                
                if last_request_time_str:
                    last_request_time = float(last_request_time_str)
                    current_time = time.time()
                    time_since_last_request = current_time - last_request_time
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, –∂–¥–µ–º
                    if time_since_last_request < self.delay_between_requests:
                        sleep_time = self.delay_between_requests - time_since_last_request
                        print(f"‚è≥ [RATE LIMIT] Waiting {sleep_time:.2f} seconds before next request")
                        await asyncio.sleep(sleep_time)
                else:
                    print(f"üöÄ [RATE LIMIT] No previous request found, proceeding immediately")
                    
            finally:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                await redis.delete(lock_key)
                
        except Exception as e:
            print(f"‚ö†Ô∏è [RATE LIMIT] Error checking rate limit: {e}, proceeding anyway")

    async def _update_rate_limit_timestamp(self) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ Redis
        """
        try:
            current_time = time.time()
            await redis.set(self.redis_key, str(current_time))
            print(f"üìù [RATE LIMIT] Updated last request time: {current_time}")
        except Exception as e:
            print(f"‚ö†Ô∏è [RATE LIMIT] Error updating rate limit timestamp: {e}")

    async def _request(self, method: str, endpoint: str, **kwargs) -> dict:
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ rate limiting.

        :param method: HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE –∏ —Ç.–¥.)
        :param endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
        :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤)
        :param data: –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ä–º—ã (–¥–ª—è POST/PUT/PATCH)
        :param json: JSON –¥–∞–Ω–Ω—ã–µ (–¥–ª—è POST/PUT/PATCH)
        :return: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        await self._wait_for_rate_limit()
        
        url = f"{self.base_url}/{endpoint.lstrip('/')}"

        params = kwargs.pop("params", {}) or {}
        if self.params_api_key:
            self._set_params_api_key(params)

        print(f"üåê [HTTP REQUEST] {method} {url}")
        print(f"üìã [HTTP REQUEST] Params: {params}")
        print(f"üîë [HTTP REQUEST] Headers: {self.headers}")

        max_retries = 5  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

        for attempt in range(max_retries):
            try:
                async with aiohttp.ClientSession(
                    headers=self.headers
                ) as session:
                    async with session.request(
                        method, url, params=params, **kwargs
                    ) as response:
                        print(f"üì° [HTTP RESPONSE] Status: {response.status} {response.reason}")
                        print(f"üì° [HTTP RESPONSE] Headers: {dict(response.headers)}")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 429 –æ—à–∏–±–∫—É —Å Retry-After
                        if response.status == 429:
                            retry_after = response.headers.get('Retry-After')
                            if retry_after:
                                wait_time = int(retry_after)
                                print(f"‚è≥ [RATE LIMIT] 429 error, waiting {wait_time} seconds (Retry-After)")
                                await asyncio.sleep(wait_time)
                                continue
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç Retry-After, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                                wait_time = (2 ** attempt) * 5  # 5, 10, 20, 40 —Å–µ–∫—É–Ω–¥
                                print(f"‚è≥ [RATE LIMIT] 429 error, waiting {wait_time} seconds (exponential backoff)")
                                await asyncio.sleep(wait_time)
                                continue
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 402 –æ—à–∏–±–∫—É (Payment Required)
                        if response.status == 402:
                            print(f"üí∞ [PAYMENT] 402 Payment Required - API quota exceeded")
                            raise ValueError("API quota exceeded (402 Payment Required)")
                        
                        response.raise_for_status()
                        result = await response.json()
                        
                        print(f"‚úÖ [HTTP RESPONSE] Response received: {type(result)}")
                        if isinstance(result, list):
                            print(f"üìä [HTTP RESPONSE] List length: {len(result)}")
                            if len(result) > 0:
                                print(f"üìä [HTTP RESPONSE] First item: {result[0]}")
                        elif isinstance(result, dict):
                            print(f"üìä [HTTP RESPONSE] Dict keys: {list(result.keys())}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                        await self._update_rate_limit_timestamp()
                        
                        return result
            except aiohttp.ClientResponseError as http_err:
                error_message = f"HTTP error occurred: {http_err.status} {http_err.message}"
                print(f"‚ùå [HTTP ERROR] {error_message}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    error_response = await response.json()
                    print(f"üìÑ [HTTP ERROR] Response body (JSON): {error_response}")
                except Exception as json_err:
                    try:
                        error_text = await response.text()
                        print(f"üìÑ [HTTP ERROR] Response text: {error_text}")
                    except Exception as text_err:
                        print(f"üìÑ [HTTP ERROR] Could not read response body")
                        print(f"üìÑ [HTTP ERROR] Text read error: {text_err}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ 429, 402 –∏–ª–∏ 404, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                if http_err.status in [429, 402, 404]:
                    raise ValueError(f"API error: {http_err.status} {http_err.message}")
                    
            except aiohttp.ClientError as err:
                error_message = f"Error occurred: {str(err)}"
                print(f"‚ùå [HTTP ERROR] {error_message}")
            except Exception as err:
                error_message = f"An error occurred: {str(err)}"
                print(f"‚ùå [HTTP ERROR] {error_message}")

            if attempt == max_retries - 1:
                raise ValueError(error_message)

            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            wait_time = (2 ** attempt) * 2  # 2, 4, 8, 16 —Å–µ–∫—É–Ω–¥
            print(f"‚è≥ [RETRY] Waiting {wait_time} seconds before retry {attempt + 1}/{max_retries}")
            await asyncio.sleep(wait_time)

        raise ValueError("Unexpected error occurred")

    async def get(
        self, endpoint: str, params: dict[str, Any] | None = None
    ) -> dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å GET-–∑–∞–ø—Ä–æ—Å

        :param endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
        :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        :return: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        """
        return await self._request("GET", endpoint, params=params)

    async def post(
        self,
        endpoint: str,
        data: dict[str, Any] | None = None,
        json: dict[str, Any] | None = None,
        params: dict[str, Any] | None = None,
    ) -> dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å POST-–∑–∞–ø—Ä–æ—Å

        :param endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
        :param data: –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ä–º—ã
        :param json: JSON –¥–∞–Ω–Ω—ã–µ
        :param params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        :return: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        """
        return await self._request("POST", endpoint, data=data, json=json, params=params)

    async def put(
        self,
        endpoint: str,
        data: dict[str, Any] | None = None,
        json: dict[str, Any] | None = None,
    ) -> dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å PUT-–∑–∞–ø—Ä–æ—Å

        :param endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
        :param data: –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ä–º—ã
        :param json: JSON –¥–∞–Ω–Ω—ã–µ
        :return: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        """
        return await self._request("PUT", endpoint, data=data, json=json)

    async def patch(
        self,
        endpoint: str,
        data: dict[str, Any] | None = None,
        json: dict[str, Any] | None = None,
    ) -> dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å PATCH-–∑–∞–ø—Ä–æ—Å

        :param endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
        :param data: –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ä–º—ã
        :param json: JSON –¥–∞–Ω–Ω—ã–µ
        :return: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        """
        return await self._request("PATCH", endpoint, data=data, json=json)
