from asyncio.log import logger
from fastapi import APIRouter, Query
from typing import List, Optional
from app.api_client import cbonds_api_client


router = APIRouter(prefix="/etf", tags=["etf"])


@router.get("/etf_funds")
async def etf_funds(
    filters: Optional[List[str]] = Query(None, description="–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'field:operator:value' –∏–ª–∏ 'field:value' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é operator=eq)")
):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "field:value" –∏–ª–∏ "field:operator:value" –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    formatted_filters = []
    if filters:
        for filter_str in filters:
            if ":" in filter_str:
                parts = filter_str.split(":")
                if len(parts) == 2:
                    # –§–æ—Ä–º–∞—Ç "field:value" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä eq –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    field, value = parts
                    formatted_filters.append({
                        "field": field.strip(),
                        "operator": "eq",
                        "value": value.strip()
                    })
                elif len(parts) == 3:
                    # –§–æ—Ä–º–∞—Ç "field:operator:value"
                    field, operator, value = parts
                    formatted_filters.append({
                        "field": field.strip(),
                        "operator": operator.strip(),
                        "value": value.strip()
                    })
    
    res = await cbonds_api_client.get_etf_funds(filters=formatted_filters)
    logger.info(f"üè¢ etf data length: {len(res.get('items', []))}")
    return res


@router.get("/etf_share_classes_quotes")
async def etf_share_classes_quotes(
    filters: Optional[List[str]] = Query(None, description="–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'field:operator:value' –∏–ª–∏ 'field:value' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é operator=eq)"),
    limit: Optional[int] = Query(40, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    offset: Optional[int] = Query(0, description="–°–º–µ—â–µ–Ω–∏–µ"),
    fields: Optional[List[str]] = Query(None, description="–°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è")
):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "field:value" –∏–ª–∏ "field:operator:value" –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    formatted_filters = []
    if filters:
        for filter_str in filters:
            if ":" in filter_str:
                parts = filter_str.split(":")
                if len(parts) == 2:
                    # –§–æ—Ä–º–∞—Ç "field:value" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä eq –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    field, value = parts
                    formatted_filters.append({
                        "field": field.strip(),
                        "operator": "eq",
                        "value": value.strip()
                    })
                elif len(parts) == 3:
                    # –§–æ—Ä–º–∞—Ç "field:operator:value"
                    field, operator, value = parts
                    formatted_filters.append({
                        "field": field.strip(),
                        "operator": operator.strip(),
                        "value": value.strip()
                    })
    
    quantity = {"limit": limit, "offset": offset}
    
    res = await cbonds_api_client.get_etf_share_classes_quotes(
        filters=formatted_filters,
        quantity=quantity,
        fields=fields
    )
    return res

@router.get("/etf_share_classes_dividends")
async def etf_share_classes_dividends(
    filters: Optional[List[str]] = Query(None, description="–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'field:operator:value' –∏–ª–∏ 'field:value' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é operator=eq)"),
    limit: Optional[int] = Query(40, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    offset: Optional[int] = Query(0, description="–°–º–µ—â–µ–Ω–∏–µ"),
    fields: Optional[List[str]] = Query(None, description="–°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è")
):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "field:value" –∏–ª–∏ "field:operator:value" –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    formatted_filters = []
    if filters:
        for filter_str in filters:
            if ":" in filter_str:
                parts = filter_str.split(":")
                if len(parts) == 2:
                    # –§–æ—Ä–º–∞—Ç "field:value" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä eq –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    field, value = parts
                    formatted_filters.append({
                        "field": field.strip(),
                        "operator": "eq",
                        "value": value.strip()
                    })
                elif len(parts) == 3:
                    # –§–æ—Ä–º–∞—Ç "field:operator:value"
                    field, operator, value = parts
                    formatted_filters.append({
                        "field": field.strip(),
                        "operator": operator.strip(),
                        "value": value.strip()
                    })
    
    quantity = {"limit": limit, "offset": offset}
    
    res = await cbonds_api_client.get_etf_share_classes_dividends(
        filters=formatted_filters,
        quantity=quantity,
        fields=fields
    )
    return res
