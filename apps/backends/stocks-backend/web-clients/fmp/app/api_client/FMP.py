from asyncio.log import logger
from app.api_client.base import BaseAsyncApiClient


class FMPApiClient(BaseAsyncApiClient):
    async def get_stock_info(self, stock_symbol: str):
        """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ü–∏–∏.

        Args:
            stock_symbol (str): tiker

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ü–∏–∏, –æ—Ç–∫—Ä—ã—Ç–∏–µ, –∑–∞–∫—Ä—ã—Ç–∏–µ, p/e, eps...
        """
        endpoint = "api/v3/quote/" + stock_symbol
        return await self.get(endpoint=endpoint)

    async def get_company_info(self, stock_symbol: str):
        """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏.

        Args:
            stock_symbol (str): tiker

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏, –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        """
        endpoint = "api/v4/company-outlook/"
        params = {"symbol": stock_symbol}
        return await self.get(endpoint=endpoint, params=params)

    async def get_company_key_metrics(
        self, stock_symbol: str, params: dict = None
    ):
        """
        –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏.

        Args:
            stock_symbol (str): tiker
            params (dict, optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤.

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.
        """
        endpoint = "api/v3/key-metrics/" + stock_symbol
        return await self.get(endpoint=endpoint, params=params)

    async def get_leaders_volume(self):
        """
        –õ–∏–¥–µ—Ä—ã –ø–æ –æ–±—å–µ–º—É, –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–µ–º–∞. (–∑–Ω–∞—á–µ–Ω–∏–µ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞)

        Returns:
            –õ–∏–¥–µ—Ä—ã –ø–æ –æ–±—å–µ–º—É.
        """
        endpoint = "api/v3/stock_market/actives"
        return await self.get(endpoint=endpoint)

    async def get_growth_leaders_info(self) -> dict:
        """
        –õ–∏–¥–µ—Ä—ã –ø–æ —Ä–æ—Å—Ç—É

        Returns:
            –ú–∞—Å—Å–∏–≤ —Å –ª–∏–¥–µ—Ä–∞–º–∏ –ø–æ —Ä–æ—Å—Ç—É % –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.
        """
        endpoint = "api/v3/stock_market/gainers"
        return await self.get(endpoint=endpoint)

    async def get_decline_leaders_info(self):
        """
        –õ–∏–¥–µ—Ä—ã –ø–æ –ø–∞–¥–µ–Ω–∏—é

        Returns:
            –ú–∞—Å—Å–∏–≤ —Å –ª–∏–¥–µ—Ä–∞–º–∏ –ø–æ –ø–∞–¥–µ–Ω–∏—é % –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.
        """
        endpoint = "api/v3/stock_market/losers"
        return await self.get(endpoint=endpoint)

    async def get_trading_volumes_info(self, stock_symbol: str):
        """
        –¢–æ—Ä–≥–æ–≤—ã–π –æ–±—å–µ–º

        Args:
            stock_symbol (str): tiker

        Returns:
            "volume" - —Ç–æ—Ä–≥–æ–≤—ã–π –æ–±—å–µ–º –∑–∞ –ø—Ä–æ—à–ª—ã–π –¥–µ–Ω—å [0].
        """
        endpoint = "stable/historical-price-eod/full?symbol=" + stock_symbol
        result = await self.get(endpoint=endpoint)
        return result[0]

    async def get_quote_chart_info(self, stock: str, params: dict):
        """
        –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫

        Args:
            stock (str): tiker
            start (str): 2022-08-10
            end (str): 2022-09-10

        Returns:
            _type_: dict{"symbol": str, "historical": [{}, {}]
        """
        endpoint = "api/v3/historical-price-full/" + stock
        return await self.get(endpoint=endpoint, params=params)

    async def get_financial_statements_info(
        self, stock_symbol: str, params: dict = None
    ):
        """
        –í—ã—Ä—É—á–∫–∞ –∏ —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ –≤—ã—Ä—É—á–∫–∏

        Args:
            stock_symbol (str): tiker
            params (dict, optional): Limit - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤. Period - annual, quarter (–æ—Ç—á–µ—Ç –≥–æ–¥ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∞–ª).

        Returns:
            "netIncome" - —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
            "grossProfit" - –≤—ã—Ä—É—á–∫–∞
        """
        endpoint = "api/v3/income-statement/" + stock_symbol
        return await self.get(endpoint=endpoint, params=params)

    async def get_balance_sheet_states_info(
        self, stock_symbol: str, params: dict = None
    ):
        """
        –î–æ–ª–≥–∏ –∏ –∞–∫—Ç–∏–≤—ã

        Args:
            stock_symbol (str): tiker
            params (dict, optional): Limit - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤. Period - annual, quarter (–æ—Ç—á–µ—Ç –≥–æ–¥ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∞–ª).

        Returns:
            "totalAssets" - –æ–±—â–∏–µ –∞–∫—Ç–∏–≤—ã
            "totalLiabilities" - –æ–±—â–∏–µ –¥–æ–ª–≥–∏
        """
        endpoint = "api/v3/balance-sheet-statement/" + stock_symbol
        return await self.get(endpoint=endpoint, params=params)

    async def get_—Åashflow_growth_info(
        self, stock_symbol: str, params: dict = None
    ):
        """
        –†–æ—Å—Ç –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞

        Args:
            stock_symbol (str): tiker
            params (dict, optional): Limit - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤. Period - annual, quarter (–æ—Ç—á–µ—Ç –≥–æ–¥ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∞–ª).

        Returns:
            _type_: [{}, {}]
        """
        endpoint = "api/v3/cash-flow-statement-growth/" + stock_symbol
        return await self.get(endpoint=endpoint, params=params)

    async def get_cashflow_info(self, stock_symbol: str, params: dict = None):
        """
        –î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫

        Args:
            stock_symbol (str): tiker
            params (dict, optional): Limit - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤. Period - annual, quarter (–æ—Ç—á–µ—Ç –≥–æ–¥ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∞–ª).

        Returns:
            _type_: [{}, {}]
        """
        endpoint = "api/v3/cash-flow-statement/" + stock_symbol
        return await self.get(endpoint=endpoint, params=params)

    async def get_leaders_volatility(self):
        """
        –õ–∏–¥–µ—Ä—ã –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏

        Returns:
            –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤–∞—Ä–µ–π.
        """

        endpoint = "api/v3/stock-screener"
        return await self.get(endpoint=endpoint)

    async def get_high_low_price_info(self, stock_symbol: str):
        """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–∫—Å–∏–º—É–º–µ-–º–∏–Ω–∏–º—É–º–µ –∑–∞ –≥–æ–¥ –∏ –¥—Ä.

        Args:
            stock_symbol (str): tiker

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö.
        """
        endpoint = "stable/batch-quote?symbols=" + stock_symbol
        return await self.get(endpoint=endpoint)

    async def get_industry_info(self, params: dict):
        """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—Ç—Ä–∞—Å–ª–µ.

        Args:
            start (str): 2022-08-10
            exchange (str): NYSE, NASDAQ, AMEX

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—Ç—Ä–∞—Å–ª–µ.
        """
        endpoint = "api/v4/industry_price_earning_ratio"
        return await self.get(endpoint=endpoint, params=params)

    async def get_institut_info(self, stock_symbol: str):
        """
        –§–æ–Ω–¥—ã –¥–µ—Ä–∂–∞—Ç–µ–ª–∏

        Args:
            stock_symbol (str): tiker

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ü–∏–π —É —Ñ–æ–Ω–¥–æ–≤.
        """
        endpoint = "api/v3/institutional-holder/" + stock_symbol
        return await self.get(endpoint=endpoint)

    async def get_dividends_info(self, stock: str):
        endpoint = "stable/dividends?symbol=" + stock
        return await self.get(endpoint=endpoint)

    async def get_company_screener(self, sector: str = None, limit: int = 25):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä—É.

        Args:
            sector (str, optional): –°–µ–∫—Ç–æ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            limit (int, optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25)

        Returns:
            –ú–∞—Å—Å–∏–≤ –∫–æ–º–ø–∞–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö, –æ–±—ä–µ–º–∞—Ö —Ç–æ—Ä–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö
        """
        print(f"üîç [FMP CLIENT] get_company_screener called with sector={sector}, limit={limit}")
        
        endpoint = "stable/company-screener"
        params = {}
        
        if sector:
            params["sector"] = sector
        
        if limit:
            params["limit"] = limit
            
        print(f"üì° [FMP CLIENT] Making request to endpoint: {endpoint} with params: {params}")
        
        try:
            result = await self.get(endpoint=endpoint, params=params)
            print(f"‚úÖ [FMP CLIENT] API response received: {len(result) if isinstance(result, list) else 'not a list'} items")
            print(f"üìä [FMP CLIENT] API response sample: {result[:2] if isinstance(result, list) and len(result) > 0 else result}")
            return result
        except Exception as e:
            print(f"‚ùå [FMP CLIENT] API error: {str(e)}")
            raise

    async def get_historical_chart_1hour(self, symbol: str, from_date: str = None, to_date: str = None, nonadjusted: bool = False):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏ (1 Hour Interval Stock Chart API).

        Args:
            symbol (str): –°–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "AAPL")
            from_date (str, optional): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            to_date (str, optional): –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            nonadjusted (bool, optional): –ù–µ—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)

        Returns:
            –ú–∞—Å—Å–∏–≤ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å open, high, low, close, volume –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
        """
        endpoint = f"stable/historical-chart/1hour?symbol={symbol}"
        params = {}
        
        if from_date:
            params["from"] = from_date
        
        if to_date:
            params["to"] = to_date
            
        if nonadjusted:
            params["nonadjusted"] = str(nonadjusted).lower()
            
        return await self.get(endpoint=endpoint, params=params)

    async def get_historical_price_eod_full(self, symbol: str, from_date: str = None, to_date: str = None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏.

        Args:
            symbol (str): –°–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "AAPL")
            from_date (str, optional): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            to_date (str, optional): –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD

        Returns:
            –ú–∞—Å—Å–∏–≤ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å open, high, low, close, volume –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        """
        endpoint = f"stable/historical-price-eod/full?symbol={symbol}"
        params = {}
        
        if from_date:
            params["from"] = from_date
        
        if to_date:
            params["to"] = to_date
            
        return await self.get(endpoint=endpoint, params=params)
