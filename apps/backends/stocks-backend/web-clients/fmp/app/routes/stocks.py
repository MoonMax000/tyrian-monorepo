from fastapi import APIRouter, Depends
from app.api_client import fmp_api_client
from app.models.params import Params


router = APIRouter(prefix="/stocks", tags=["stocks"])


@router.get("/financial_statements/{symbol}")
async def financial_statements_info(symbol: str, params: Params = Depends()):
    return await fmp_api_client.get_financial_statements_info(
        stock_symbol=symbol, params=params.model_dump(exclude_none=True)
    )


@router.get("/balance_sheet_states/{symbol}")
async def balance_sheet_states_info(symbol: str, params: Params = Depends()):
    return await fmp_api_client.get_balance_sheet_states_info(
        stock_symbol=symbol, params=params.model_dump(exclude_none=True)
    )


@router.get("/cashflow_growth/{symbol}")
async def —Åashflow_growth_info(symbol: str, params: Params = Depends()):
    return await fmp_api_client.get_—Åashflow_growth_info(
        stock_symbol=symbol, params=params.model_dump(exclude_none=True)
    )


@router.get("/cashflow/{symbol}")
async def cashflow_info(symbol: str, params: Params = Depends()):
    return await fmp_api_client.get_cashflow_info(
        stock_symbol=symbol, params=params.model_dump(exclude_none=True)
    )


@router.get("/high_low_price/{symbol}")
async def high_low_price_info(symbol: str):
    return await fmp_api_client.get_high_low_price_info(stock_symbol=symbol)


@router.get("/dividends/{symbol}")
async def dividends_info(symbol: str):
    return await fmp_api_client.get_dividends_info(stock=symbol)


@router.get("/company-screener")
async def company_screener(sector: str = None, limit: int = 25):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä—É.
    
    Args:
        sector: –°–µ–∫—Ç–æ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Technology", "Healthcare")
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25)
    """
    print(f"üîç [ROUTE] company-screener called with sector={sector}, limit={limit}")
    
    try:
        result = await fmp_api_client.get_company_screener(sector=sector, limit=limit)
        print(f"‚úÖ [ROUTE] company-screener result: {len(result) if isinstance(result, list) else 'not a list'} items")
        print(f"üìä [ROUTE] company-screener data sample: {result[:2] if isinstance(result, list) and len(result) > 0 else result}")
        return result
    except Exception as e:
        print(f"‚ùå [ROUTE] company-screener error: {str(e)}")
        raise


@router.get("/historical-chart/1hour")
async def historical_chart_1hour(symbol: str, from_date: str = None, to_date: str = None, nonadjusted: bool = False):
    """
    1 Hour Interval Stock Chart API - –ø–æ–ª—É—á–∞–µ—Ç —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏.
    
    Args:
        symbol: –°–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "AAPL")
        from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        nonadjusted: –ù–µ—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    """
    return await fmp_api_client.get_historical_chart_1hour(
        symbol=symbol, 
        from_date=from_date, 
        to_date=to_date, 
        nonadjusted=nonadjusted
    )


@router.get("/historical-price-eod/full")
async def historical_price_eod_full(symbol: str, from_date: str = None, to_date: str = None):
    """
    Historical Price EOD Full API - –ø–æ–ª—É—á–∞–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏.
    
    Args:
        symbol: –°–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "AAPL")
        from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    """
    return await fmp_api_client.get_historical_price_eod_full(symbol=symbol, from_date=from_date, to_date=to_date)


@router.get("/{symbol}")
async def stocks_info(symbol: str):
    res = await fmp_api_client.get_stock_info(stock_symbol=symbol)
    return res
