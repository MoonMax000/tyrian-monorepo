from datetime import datetime, timedelta

from logger import logger
from .get_block_data import BlockDataGetter
from http_client import http_client
from services.data_converters.stocks import sort_bonds_data
# from ..get_block import get_block  # –£–±–∏—Ä–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from settings import settings


class TerrapinCorporateBondsGetter(BlockDataGetter):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π —á–µ—Ä–µ–∑ Terrapin API.
    """

    async def _map_corporate_filters(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ú–∞–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π –∏–∑ CBONDS —Ñ–æ—Ä–º–∞—Ç–∞ –≤ Terrapin BondFilter.
        """
        terrapin_filters = {}

        # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ kind
        kind = params.get("kind", "All Bonds")
        
        # –§–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ Terrapin API
        if kind == "fixed rate":
            terrapin_filters["interest_types"] = ["fixed rate"]
            
        elif kind == "floating rate":
            terrapin_filters["interest_types"] = ["variable rate"]
            
        elif kind == "zero coupon":
            terrapin_filters["interest_types"] = ["zero rate / discount rate"]
            
        elif kind == "All Bonds":
            # –í—Å–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ - –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            pass

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—è)
        if "sort_by" in params:
            sort_by = params["sort_by"]
            sort_direction = params.get("sort_direction", "desc")
            
            # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è Terrapin API
            terrapin_sort_fields = {
                "name": "issuer_name",
                "ticker": "ticker", 
                "isin": "isin",
                "currency": "currency",
                "coupon": "coupon",
                "maturity_date": "maturity_date",
                "country": "country",
                "issue_rating_group": "issue_rating_group",
                "issuer_rating_group": "issuer_rating_group"
            }
            
            if sort_by in terrapin_sort_fields:
                sort_field = terrapin_sort_fields[sort_by]
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "-" –¥–ª—è —É–±—ã–≤–∞—é—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                if sort_direction == "desc":
                    sort_field = f"-{sort_field}"
                
                terrapin_filters["sort"] = [sort_field]
            # –î–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ytm) —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –≤ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏
        self._postprocess_filters = {
            "kind": kind,
            "limit": params.get("limit", 100),
            "sort_by": params.get("sort_by"),
            "sort_direction": params.get("sort_direction", "desc")
        }

        logger.debug(f"Mapped corporate filters: {terrapin_filters}")
        return terrapin_filters


    async def _get_terrapin_bonds_data(self, filters: Dict[str, Any], bond_type: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–π —á–µ—Ä–µ–∑ Terrapin API.
        
        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π
            bond_type: –¢–∏–ø –æ–±–ª–∏–≥–∞—Ü–∏–π ("corporate" –∏–ª–∏ "government")
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            logger.info(f"üîç Source: {self.source}, Port: {self.port}")
            base_url = f"http://{self.source}:{self.port}" if self.source and self.port else settings.TERRAPIN_API_URL
            logger.info(f"üîó Using Terrapin base URL: {base_url}")
            
            # 1. –ü–æ–∏—Å–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π
            search_url = f"{base_url}/bonds/"
            logger.info(f"üöÄ Requesting bonds from Terrapin: {search_url} with filters: {filters}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º issuer_types –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
            filters["issuer_types"] = ["corporate"]
            
            search_response = await http_client.post(url=search_url, json=filters)
            
            if not search_response or "data" not in search_response:
                logger.warning("No bonds data received from Terrapin")
                return []

            bonds_data = search_response.get("data", [])
            logger.info(f"Received {len(bonds_data)} bonds from Terrapin search")

            if not bonds_data:
                return []

            # 2. –ü–æ–ª—É—á–∞–µ–º ISIN –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö
            isins = [bond.get("isin") for bond in bonds_data if bond.get("isin")]
            
            if not isins:
                logger.warning("No ISINs found in bonds data")
                return bonds_data

            # 3. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ YTM –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            today = datetime.now().strftime("%Y-%m-%d")
            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            
            pricing_url = f"{base_url}/bonds/latest_prices"
            pricing_payload = {"isins": isins, "as_of_date": today}
            
            pricing_response = await http_client.post(url=pricing_url, json=pricing_payload)
            
            if pricing_response and "data" in pricing_response:
                pricing_data = pricing_response.get("data", [])
                logger.info(f"Received {len(pricing_data)} pricing records from Terrapin for {today}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å {isin: pricing_data} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                pricing_dict = {item.get("isin"): item for item in pricing_data if item.get("isin")}
                
                # 4. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                yesterday_payload = {"isins": isins, "as_of_date": yesterday}
                yesterday_response = await http_client.post(url=pricing_url, json=yesterday_payload)
                
                yesterday_pricing_dict = {}
                if yesterday_response and "data" in yesterday_response:
                    yesterday_pricing_data = yesterday_response.get("data", [])
                    logger.info(f"Received {len(yesterday_pricing_data)} pricing records from Terrapin for {yesterday}")
                    yesterday_pricing_dict = {item.get("isin"): item for item in yesterday_pricing_data if item.get("isin")}
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–π —Å —Ü–µ–Ω–∞–º–∏
                for bond in bonds_data:
                    isin = bond.get("isin")
                    if isin in pricing_dict:
                        pricing_info = pricing_dict[isin]
                        current_price = pricing_info.get("price")
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        price_change = None
                        if isin in yesterday_pricing_dict:
                            yesterday_price = yesterday_pricing_dict[isin].get("price")
                            if current_price and yesterday_price and yesterday_price != 0:
                                price_change = ((current_price - yesterday_price) / yesterday_price) * 100
                            else:
                                price_change = "undefined"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º YTM –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
                        bond.update({
                            "ytm": pricing_info.get("yield_to_maturity", 0),
                            "price": current_price,
                            "last_trade_date": pricing_info.get("last_trade_date"),
                            "volume": pricing_info.get("estimated_volume", 0),
                            "price_change": price_change,
                        })

            logger.info(f"Successfully processed {len(bonds_data)} bonds with pricing data")
            return bonds_data

        except Exception as e:
            logger.error(f"Error getting bonds data from Terrapin: {str(e)}")
            return []

    async def _convert_terrapin_to_cbonds_format(self, terrapin_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Terrapin –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å CBONDS.
        """
        converted_data = []
        
        for bond in terrapin_data:
            # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ Terrapin –≤ CBONDS —Ñ–æ—Ä–º–∞—Ç
            converted_bond = {
                "id": bond.get("handle") or bond.get("isin"),
                "isin": bond.get("isin"),
                "emitent_name_eng": bond.get("issuer_name", ""),
                "emitent_type_name_eng": bond.get("issuer_type", ""),
                "emitent_country_name_eng": bond.get("issuer_country", ""),
                "maturity_date": bond.get("maturity_date"),
                "coupon_rate": bond.get("coupon_rate"),
                "floating_rate": "1" if bond.get("interest_type") == "variable rate" else "0",
                "coupon_type_id": "1" if bond.get("interest_type") == "zero rate / discount rate" else "0",
                "cupon_eng": f"{bond.get('coupon_rate', 0)}%",
                "kind_id": 1 if "corporate" in bond.get("issuer_type", "").lower() else 0,
                "kind_name_eng": bond.get("asset_class", "bond"),
                "ytm": bond.get("ytm"),
                "price": bond.get("price"),
                "volume": bond.get("volume"),
                "price_change": bond.get("price_change"),
                "last_trade_date": bond.get("last_trade_date"),
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "emitent_type_id": 1 if "corporate" in bond.get("issuer_type", "").lower() else 0,
            }
            
            converted_data.append(converted_bond)
        
        logger.debug(f"Converted {len(converted_data)} bonds from Terrapin to CBONDS format")
        return converted_data

    async def _postprocess_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö Terrapin API.
        """
        if not hasattr(self, '_postprocess_filters') or not self._postprocess_filters:
            return data
            
        filters = self._postprocess_filters
        kind = filters.get("kind", "All Bonds")
        
        # –§–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if kind == "long-term":
            # –û–±–ª–∏–≥–∞—Ü–∏–∏ —Å–æ —Å—Ä–æ–∫–æ–º –ø–æ–≥–∞—à–µ–Ω–∏—è > 4 –ª–µ—Ç
            current_date = datetime.now()
            four_years_later = current_date + timedelta(days=4*365)
            
            filtered_data = []
            for bond in data:
                maturity_date_str = bond.get("maturity_date")
                if maturity_date_str:
                    try:
                        maturity_date = datetime.strptime(maturity_date_str, "%Y-%m-%d")
                        if maturity_date > four_years_later:
                            filtered_data.append(bond)
                    except ValueError:
                        continue
            data = filtered_data
            
        elif kind == "short-term":
            # –û–±–ª–∏–≥–∞—Ü–∏–∏ —Å–æ —Å—Ä–æ–∫–æ–º –ø–æ–≥–∞—à–µ–Ω–∏—è <= 4 –ª–µ—Ç
            current_date = datetime.now()
            four_years_later = current_date + timedelta(days=4*365)
            
            filtered_data = []
            for bond in data:
                maturity_date_str = bond.get("maturity_date")
                if maturity_date_str:
                    try:
                        maturity_date = datetime.strptime(maturity_date_str, "%Y-%m-%d")
                        if maturity_date <= four_years_later:
                            filtered_data.append(bond)
                    except ValueError:
                        continue
            data = filtered_data
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
        limit = filters.get("limit")
        if limit and limit > 0:
            data = data[:limit]
            
        logger.debug(f"Postprocessed data: {len(data)} bonds after filtering by {kind}")
        return data

    async def _get_block_data(self) -> dict:
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Terrapin API.
        """
        from shared import data_blocks
        block = data_blocks.get(self.block_slug, {}).get(self.country_slug)
        
        logger.info(f"üîç Block config: {block}")
        
        self.source = block.get("source")
        self.port = block.get("port")
        self.endpoint = block.get("endpoint")
        self.expiration_time = block.get("expiration_time", 3600)
        
        logger.info(f"üîß Set source: {self.source}, port: {self.port}")

        await self._replace_params_in_endpoint()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–ª–∏–≥–∞—Ü–∏–π
        bond_type = "corporate"
        
        # –ú–∞–ø–ø–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
        terrapin_filters = await self._map_corporate_filters(self.params or {})

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Terrapin API
        terrapin_data = await self._get_terrapin_bonds_data(terrapin_filters, bond_type)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç CBONDS –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        converted_data = await self._convert_terrapin_to_cbonds_format(terrapin_data)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö Terrapin API
        converted_data = await self._postprocess_data(converted_data)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if self.params and "sort_by" in self.params:
            converted_data = await sort_bonds_data(converted_data, self.limit, self.params)
        
        return converted_data

    async def get_block_data(self) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
        """
        if cached_data := await self._get_cached_data():
            return cached_data

        try:
            formatted_data = await self._get_block_data()
            if len(formatted_data) == 0:
                return formatted_data

            await self._save_to_cache(formatted_data)
            return formatted_data
        except Exception as e:
            logger.error(f"Error getting Terrapin bonds data: {str(e)}")
            raise


class TerrapinGovernmentBondsGetter(BlockDataGetter):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π —á–µ—Ä–µ–∑ Terrapin API.
    """

    async def _map_government_filters(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ú–∞–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π –∏–∑ CBONDS —Ñ–æ—Ä–º–∞—Ç–∞ –≤ Terrapin BondFilter.
        """
        from shared.countries import COUNTRIES_BY_REGION
        
        terrapin_filters = {}

        # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ kind –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        kind = params.get("kind", "All Bonds")
        
        countries = COUNTRIES_BY_REGION.get(kind, [])
        if countries:
            terrapin_filters["countries"] = countries
        else: 
            # –í—Å–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ - –±–µ–∑ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            pass

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—è)
        if "sort_by" in params:
            sort_by = params["sort_by"]
            sort_direction = params.get("sort_direction", "desc")
            
            # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è Terrapin API
            terrapin_sort_fields = {
                "name": "issuer_name",
                "ticker": "ticker", 
                "isin": "isin",
                "currency": "currency",
                "coupon": "coupon",
                "maturity_date": "maturity_date",
                "country": "country",
                "issue_rating_group": "issue_rating_group",
                "issuer_rating_group": "issuer_rating_group"
            }
            
            if sort_by in terrapin_sort_fields:
                sort_field = terrapin_sort_fields[sort_by]
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "-" –¥–ª—è —É–±—ã–≤–∞—é—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                if sort_direction == "desc":
                    sort_field = f"-{sort_field}"
                
                terrapin_filters["sort"] = [sort_field]
            # –î–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ytm) —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –≤ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏
        self._postprocess_filters = {
            "kind": kind,
            "limit": params.get("limit", 100),
            "sort_by": params.get("sort_by"),
            "sort_direction": params.get("sort_direction", "desc")
        }

        logger.debug(f"Mapped government filters: {terrapin_filters}")
        return terrapin_filters

    async def _get_terrapin_bonds_data(self, filters: Dict[str, Any], bond_type: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–π —á–µ—Ä–µ–∑ Terrapin API.
        
        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π
            bond_type: –¢–∏–ø –æ–±–ª–∏–≥–∞—Ü–∏–π ("corporate" –∏–ª–∏ "government")
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            logger.info(f"üîç Source: {self.source}, Port: {self.port}")
            base_url = f"http://{self.source}:{self.port}" if self.source and self.port else settings.TERRAPIN_API_URL
            logger.info(f"üîó Using Terrapin base URL: {base_url}")
            
            # 1. –ü–æ–∏—Å–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π
            search_url = f"{base_url}/bonds/"
            logger.info(f"üöÄ Requesting bonds from Terrapin: {search_url} with filters: {filters}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º issuer_types –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
            filters["issuer_types"] = ["government"]
            
            search_response = await http_client.post(url=search_url, json=filters)
            logger.info(f"üìä Search response: {len(search_response.get('data', []))} bonds found")
            
            if not search_response.get("data"):
                logger.warning("No bonds found in search response")
                return []
            
            bonds_data = search_response["data"]
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∑–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            isins = [bond.get("isin") for bond in bonds_data if bond.get("isin")]
            if not isins:
                logger.warning("No ISINs found in bonds data")
                return []
            
            today = datetime.now().strftime("%Y-%m-%d")
            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            
            pricing_url = f"{base_url}/bonds/latest_prices"
            pricing_payload = {"isins": isins, "as_of_date": today}
            logger.info(f"üí∞ Requesting pricing data for {len(isins)} bonds for {today}")
            
            pricing_response = await http_client.post(url=pricing_url, json=pricing_payload)
            logger.info(f"üí∞ Pricing response: {len(pricing_response.get('data', []))} pricing records for {today}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            yesterday_payload = {"isins": isins, "as_of_date": yesterday}
            yesterday_response = await http_client.post(url=pricing_url, json=yesterday_payload)
            logger.info(f"üí∞ Yesterday pricing response: {len(yesterday_response.get('data', []))} pricing records for {yesterday}")
            
            # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            combined_data = []
            pricing_dict = {price.get("isin"): price for price in pricing_response.get("data", [])}
            yesterday_pricing_dict = {price.get("isin"): price for price in yesterday_response.get("data", [])}
            
            for bond in bonds_data:
                isin = bond.get("isin")
                if not isin:
                    continue
                    
                combined_bond = bond.copy()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∑–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                if isin in pricing_dict:
                    pricing_info = pricing_dict[isin]
                    current_price = pricing_info.get("price")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                    price_change = None
                    if isin in yesterday_pricing_dict:
                        yesterday_price = yesterday_pricing_dict[isin].get("price")
                        if current_price and yesterday_price and yesterday_price != 0:
                            price_change = ((current_price - yesterday_price) / yesterday_price) * 100
                    
                    combined_bond.update({
                        "ytm": pricing_info.get("yield_to_maturity"),
                        "price": current_price,
                        "last_trade_date": pricing_info.get("last_trade_date"),
                        "volume": pricing_info.get("estimated_volume"),
                        "price_change": price_change,
                    })
                
                combined_data.append(combined_bond)
            
            logger.info(f"‚úÖ Combined {len(combined_data)} bonds with pricing data")
            return combined_data
            
        except Exception as e:
            logger.error(f"Error getting bonds data from Terrapin: {str(e)}")
            raise

    async def _convert_terrapin_to_cbonds_format(self, terrapin_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Terrapin –≤ —Ñ–æ—Ä–º–∞—Ç CBONDS –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        """
        converted_data = []
        
        for bond in terrapin_data:
            converted_bond = {
                "id": bond.get("isin", ""),
                "isin": bond.get("isin", ""),
                "ticker": bond.get("ticker", ""),
                "name": bond.get("name", ""),
                "emitent_name_eng": bond.get("issuer_name", ""),
                "emitent_type_name_eng": "government",
                "emitent_type_id": 0,
                "issuer_type": bond.get("issuer_type", ""),
                "emitent_country_name_eng": bond.get("country", ""),
                "maturity_date": bond.get("maturity_date", ""),
                "coupon_rate": bond.get("coupon", 0.0),
                "coupon_frequency": bond.get("coupon_frequency", 1),
                "interest_type": bond.get("interest_type", ""),
                "floating_rate": "1" if bond.get("interest_type") == "variable rate" else "0",
                "coupon_type_id": "1" if bond.get("interest_type") == "zero rate / discount rate" else "0",
                "cupon_eng": f"{bond.get('coupon', 0)}%" if bond.get("interest_type") != "zero rate / discount rate" else "0%",
                "ytm": bond.get("yield_to_maturity"),
                "price": bond.get("price"),
                "price_change": bond.get("price_change"),
                "currency": bond.get("currency", ""),
                "issue_date": bond.get("issue_date", ""),
                "amount_issued": bond.get("issued_amount", 0),
                "rating": bond.get("issue_rating_group", bond.get("issuer_rating_group", "")),
                "composite_issue_rating": bond.get("composite_issue_rating", ""),
                "composite_issuer_rating": bond.get("composite_issuer_rating", ""),
                "sector": bond.get("sector", ""),
                "industry_group": bond.get("industry_group", ""),
                "rank": bond.get("rank", ""),
                "is_callable": bond.get("is_callable", False),
                "is_puttable": bond.get("is_puttable", False),
                "is_green": bond.get("is_green", False),
                "is_inflation_linked": bond.get("is_inflation_linked", False),
                "is_outstanding": bond.get("is_outstanding", True),
                "minimum_denomination": bond.get("minimum_denomination", 0),
                "integral_multiple": bond.get("integral_multiple", 0),
                "lei": bond.get("lei", ""),
                "figi": bond.get("figi", ""),
                "cfi_code": bond.get("cfi_code", ""),
                "first_coupon_date": bond.get("first_coupon_date", ""),
                "interest_accrual_date": bond.get("interest_accrual_date", ""),
                "interest_accrual_convention": bond.get("interest_accrual_convention", ""),
                "registration_type": bond.get("registration_type", ""),
                "is_144a": bond.get("is_144a", False),
                "is_regs": bond.get("is_regs", False),
                "is_covered": bond.get("is_covered", False),
                "handle": bond.get("handle", ""),
                "lei_direct_parent": bond.get("lei_direct_parent", ""),
                "lei_ultimate_parent": bond.get("lei_ultimate_parent", ""),
                "duration": bond.get("duration"),
                "modified_duration": bond.get("modified_duration"),
                "convexity": bond.get("convexity"),
                "volume": bond.get("estimated_volume"),
                "pricing_date": bond.get("date"),
            }
            
            converted_data.append(converted_bond)
        
        logger.debug(f"Converted {len(converted_data)} bonds from Terrapin to CBONDS format")
        return converted_data

    async def _postprocess_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö Terrapin API.
        """
        if not hasattr(self, '_postprocess_filters') or not self._postprocess_filters:
            return data
            
        filters = self._postprocess_filters
        kind = filters.get("kind", "All Bonds")
        
        # –§–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if kind == "long-term":
            # –û–±–ª–∏–≥–∞—Ü–∏–∏ —Å–æ —Å—Ä–æ–∫–æ–º –ø–æ–≥–∞—à–µ–Ω–∏—è > 4 –ª–µ—Ç
            current_date = datetime.now()
            four_years_later = current_date + timedelta(days=4*365)
            
            filtered_data = []
            for bond in data:
                maturity_date_str = bond.get("maturity_date")
                if maturity_date_str:
                    try:
                        maturity_date = datetime.strptime(maturity_date_str, "%Y-%m-%d")
                        if maturity_date > four_years_later:
                            filtered_data.append(bond)
                    except ValueError:
                        continue
            data = filtered_data
            
        elif kind == "short-term":
            # –û–±–ª–∏–≥–∞—Ü–∏–∏ —Å–æ —Å—Ä–æ–∫–æ–º –ø–æ–≥–∞—à–µ–Ω–∏—è <= 4 –ª–µ—Ç
            current_date = datetime.now()
            four_years_later = current_date + timedelta(days=4*365)
            
            filtered_data = []
            for bond in data:
                maturity_date_str = bond.get("maturity_date")
                if maturity_date_str:
                    try:
                        maturity_date = datetime.strptime(maturity_date_str, "%Y-%m-%d")
                        if maturity_date <= four_years_later:
                            filtered_data.append(bond)
                    except ValueError:
                        continue
            data = filtered_data
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
        limit = filters.get("limit")
        if limit and limit > 0:
            data = data[:limit]
            
        logger.debug(f"Postprocessed data: {len(data)} bonds after filtering by {kind}")
        return data

    async def _get_block_data(self) -> dict:
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Terrapin API.
        """
        from shared import data_blocks
        block = data_blocks.get(self.block_slug, {}).get(self.country_slug)
        
        logger.info(f"üîç Block config: {block}")
        
        self.source = block.get("source")
        self.port = block.get("port")
        self.endpoint = block.get("endpoint")
        self.expiration_time = block.get("expiration_time", 3600)
        
        logger.info(f"üîß Set source: {self.source}, port: {self.port}")

        await self._replace_params_in_endpoint()

        # –ú–∞–ø–ø–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
        terrapin_filters = await self._map_government_filters(self.params or {})

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Terrapin API
        terrapin_data = await self._get_terrapin_bonds_data(terrapin_filters, "government")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç CBONDS –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        converted_data = await self._convert_terrapin_to_cbonds_format(terrapin_data)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö Terrapin API
        converted_data = await self._postprocess_data(converted_data)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if self.params and "sort_by" in self.params:
            converted_data = await sort_bonds_data(converted_data, self.limit, self.params)
        
        return converted_data

    async def get_block_data(self) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
        """
        if cached_data := await self._get_cached_data():
            return cached_data

        try:
            formatted_data = await self._get_block_data()
            if len(formatted_data) == 0:
                return formatted_data

            await self._save_to_cache(formatted_data)
            return formatted_data
        except Exception as e:
            logger.error(f"Error getting Terrapin bonds data: {str(e)}")
            raise
